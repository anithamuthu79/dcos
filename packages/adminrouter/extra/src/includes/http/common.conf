# Enable VTS module for metrics.
# The shared memory zone size must be sufficiently large to ensure that all
# metrics that could potentially be generated by the VTS module's
# vhost_traffic_status_filter_by_set_key directive can be stored. If the
# shared memory zone limit is hit Admin Router will crash. The metrics data
# scales with the number of metric nodes. A metric node in our case is a set
# of data about one detail, such as the number of requests made with a
# particular client, or the number of responses with a particular status code,
# or the number of URIs requested from Admin Router. In theory, the number of
# URIs can be infinitely large. Therefore, we risk running out of memory if
# the number of URIs requested grows large.
# See DCOS_OSS-4677 for limiting the number of nodes.
vhost_traffic_status_zone shared:vhost_traffic_status:8m;

client_max_body_size 1024M;

# Define custom log format. Use the default 'combined'
# format and append easily parsable timing information
# for performance analysis, and other relevant debugging
# information.
log_format customformat '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" '
    'logtime_msec=$msec '
    'upstream_addr=$upstream_addr '
    'request_time=$request_time '
    'upstream_response_time=$upstream_response_time '
    'upstream_connect_time=$upstream_connect_time '
    'upstream_header_time=$upstream_header_time';

# The syslog facility here is set to daemon because
# systemd SyslogFacility defaults to daemon and
# therefore all other DC/OS services log to it.
# https://jira.mesosphere.com/browse/DCOS-38622
access_log syslog:server=unix:/dev/log,facility=daemon customformat;
include mime.types;
default_type application/octet-stream;
sendfile on;
keepalive_timeout 65;

server_tokens off;

lua_package_path '$prefix/conf/lib/?.lua;;';


# Name: DC/OS Component Package Manager (Pkgpanda)
# Reference: https://dcos.io/docs/1.10/administering-clusters/component-management/
upstream pkgpanda {
    server unix:/run/dcos/pkgpanda-api.sock;
}

# Name: DC/OS Log
# Reference: https://dcos.io/docs/1.10/monitoring/logging/logging-api/
upstream log {
    server unix:/run/dcos/dcos-log.sock;
}

# Name: DC/OS Checks API
upstream dcos_checks_api {
    server unix:/run/dcos/dcos-checks-api.sock;
}
